---
apiVersion: carto.run/v1alpha1
kind: Workload
metadata: <object>

# Spec describes the workload. More info:
# https://cartographer.sh/docs/latest/reference/workload/#workload
spec:
  
  # Build configuration, for the build resources in the supply
  # chain
  build:
    
    # Env is an array of environment variables to propagate to
    # build resources in the supply chain.
    env:
        name: <string>
        value: <string>
        valueFrom:
  
  # Environment variables to be passed to the main container
  # running the application.
  env:
      name: <string>
      value: <string>
      valueFrom:
  
  # Image refers to a pre-built image in a registry. It is an
  # alternative to defining source code.
  image: <string>
  
  # Additional parameters.
  params:
      
    - # Name of the parameter. Should match a blueprint or
      # template parameter name.
      name: <string>
      value: <>
  
  # Resource constraints for the application. See
  # https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/
  resources:
    limits: <object>
    requests: <object>
  
  # ServiceAccountName refers to the Service account with
  # permissions to create resources submitted by the supply chain.
  # If not set, Cartographer will use serviceAccountName from
  # supply chain. 
  # If that is also not set, Cartographer will use the default
  # service account in the workload's namespace.
  serviceAccountName: <string>
  
  # ServiceClaims to be bound through ServiceBindings.
  serviceClaims:
      name: <string>
      ref:
        apiVersion: <string>
        kind: <string>
        name: <string>
  
  # The location of the source code for the workload. Specify one
  # of `spec.source` or `spec.image`
  source:
    
    # Source code location in a git repository.
    git:
      ref:
        branch: <string>
        commit: <string>
        tag: <string>
      url: <string>
    
    # Image is an OCI image is a registry that contains source
    # code OCI Image in a repository, containing the source code
    # to be used throughout the supply chain.
    image: <string>
    
    # Subpath inside the Git repository or Image to treat as the
    # root of the application. Defaults to the root if left empty.
    subPath: <string>

# Status conforms to the Kubernetes conventions:
# https://github.com/kubernetes/community/blob/master/contributors/devel/sig-architecture/api-conventions.md#typical-status-properties
status:
  
  # Conditions describing this resource's reconcile state. The top
  # level condition is of type `Ready`, and follows these
  # Kubernetes conventions:
  # https://github.com/kubernetes/community/blob/master/contributors/devel/sig-architecture/api-conventions.md#typical-status-properties
  conditions:
      
    - # lastTransitionTime is the last time the condition
      # transitioned from one status to another. This should be
      # when the underlying condition changed.  If that is not
      # known, then using the time when the API field changed is
      # acceptable.
      lastTransitionTime: <string>
      
      # message is a human readable message indicating details
      # about the transition. This may be an empty string.
      message: <string>
      
      # observedGeneration represents the .metadata.generation
      # that the condition was set based upon. For instance, if
      # .metadata.generation is currently 12, but the
      # .status.conditions[x].observedGeneration is 9, the
      # condition is out of date with respect to the current state
      # of the instance.
      observedGeneration: <integer>
      
      # reason contains a programmatic identifier indicating the
      # reason for the condition's last transition. Producers of
      # specific condition types may define expected values and
      # meanings for this field, and whether the values are
      # considered a guaranteed API. The value should be a
      # CamelCase string. This field may not be empty.
      reason: <string>
      
      # status of the condition, one of True, False, Unknown.
      status: <string>
      
      # type of condition in CamelCase or in
      # foo.example.com/CamelCase. --- Many .condition.type values
      # are consistent across resources like Available, but
      # because arbitrary conditions can be useful (see
      # .node.status.conditions), the ability to deconflict is
      # important. The regex it matches is
      # (dns1123SubdomainFmt/)?(qualifiedNameFmt)
      type: <string>
  
  # ObservedGeneration refers to the metadata.Generation of the
  # spec that resulted in the current `status`.
  observedGeneration: <integer>
  
  # SupplyChainRef is the Supply Chain resource that was used when
  # this status was set.
  supplyChainRef:
    apiVersion: <string>
    kind: <string>
    name: <string>
    namespace: <string>
